SELECT *
FROM game_events;

SELECT COUNT(*)     -- COUNT(*) – считает количество строк в таблице
FROM game_events;

SELECT COUNT(level_name)     -- COUNT(level_name) считает количество заполненных НЕ NULL значений в рамках столбца level_name
FROM game_events;

SELECT COUNT(DISTINCT level_name)     -- COUNT(DISTINCT level_name) считает количество уникальных НЕ NULL значений в рамках столбца level_name
FROM game_events;

SELECT COUNT(*),
    COUNT(level_name),
    COUNT(DISTINCT level_name)
FROM game_events;

-- Если использовать MIN() и MAX() со строковыми типами данных, то функции выберут минимальное и максимальное значение по алфавиту:
SELECT MIN(event_date),
    MAX(event_date)
FROM game_events;

-- В случае, когда необходимо предварительно отфильтровать данные для агрегации, можно написать соответствующее условие в WHERE. К примеру, если нам необходимо посчитать количество строк в таблице с пользователем 00aa49ac, тогда запрос будет выглядеть следующим образом:
SELECT COUNT(*)
FROM game_events
WHERE user_id = '00aa49ac';

-- Группировать данные можно не по одному полю, а по нескольким. Представьте, что мы хотим посчитать сумму совершенных покупок для каждого пользователя игры за каждый день (в который у пользователя была хотя бы какая-то активность). Как же в этом случае нам группировать данные?
-- Во-первых, нас интересует каждый пользователь в отдельности, значит в GROUP BY добавляем user_id.
-- Во-вторых, нам нужны данные за каждый день, значит в GROUP BY требуется добавить также event_date.
-- Целиком запрос будет выглядеть следующим образом:
SELECT user_id,
    event_date,
    SUM(revenue) 
FROM game_events
GROUP BY user_id, event_date;

-- Давайте разберем наиболее распространенные ошибки при группировке данных в SQL.
-- В части SELECT необходимо указывать поля, которые указываются в GROUP BY, или агрегирующие функции(SUM(), MAX(),MIN(),AVG(), COUNT()), например:
SELECT user_id, event_date, SUM(revenue) 
FROM game_events
GROUP BY user_id, event_date;

-- Как видно на примере, в SELECT указано три поля: user_id, event_date и revenue. По первым двум полям мы производим группировку, поэтому данные поля указаны в GROUP BY. А вот к полю revenue применена функция SUM(), то есть по полю revenue будет считаться сумма в разрезе установленной группы (GROUP BY user_id, event_date).
-- Если мы добавим еще один столбец в SELECT, но не пропишем его в GROUP BY, то при выполнении программа не будет понимать как обрабатывать этот столбец. Выглядеть это будет примерно так:

-- SELECT user_id, event_name, event_date, SUM(revenue) 
-- FROM game_events
-- GROUP BY user_id, event_date;    -- такой запрос выдаст ошибку!!!

-- ---------------------------------------------------------------------------------------------------------------

-- Теперь давайте посмотрим, как посчитать количество уникальных пользователей за каждый день. 

-- Для начала нужно определиться с данными, которые необходимо получить на выходе.
       -- Так как данные нужно посчитать за каждый день, необходимо использовать столбец event_date в качестве поля для группировки.
       -- Для подсчета количества уникальных пользователей используем функцию COUNT().
       -- И не забываем оператор DISTINCT, чтобы посчитать именно уникальных пользователей.
       
-- Решение задачи будет выглядеть так: 
SELECT event_date, COUNT(DISTINCT user_id)
FROM game_events
GROUP BY event_date;

-- Найти дату первого и последнего игрового события для каждого игрока:
SELECT user_id, max(event_date), min(event_date)
FROM game_events
GROUP BY user_id;

-- А теперь давайте узнаем, какие внутриигровые активности происходят каждый день: посчитайте количество записей по каждой внутриигровой активности (event_name) за каждый день:
SELECT event_date, event_name, COUNT(event_name)
FROM game_events
GROUP BY event_date, event_name;

-- Выведите дату, сумму внутриигровых покупок и количество уникальных пользователей за каждый день до 15 января 2021 года (включительно).
-- Столбец, содержащий сумму внутриигровых покупок, назовите total_revenue, а столбец, содержащий количество уникальных пользователей, назовите cnt_users (название столбца cnt_users сокращение от count users):
SELECT event_date,
    SUM(revenue) AS total_revenue,
    COUNT(DISTINCT user_id) AS cnt_users
FROM game_events
WHERE event_date <= '2021-01-15'
GROUP BY event_date;

-- А теперь давайте усложним предыдущую задачу и посчитаем, какую сумму в среднем тратили пользователи каждый день на внутриигровые покупки. Как и в предыдущем запросе, возьмем все дни до 15 января 2021 года (включительно).
-- Дополнение:
-- Вы же помните про функцию AVG()? В данном случае мы ее применить не можем, так как она даст другой результат. AVG(revenue) посчитает средний чек, то есть среднюю сумму покупки. А нам нужно посчитать сколько в среднем денег тратил пользователь на покупки.

-- Сперва решим, как посчитать, сколько в среднем денег потратили пользователи на внутриигровые покупки. Для этого сумму покупок за день SUM(revenue) нужно разделить на количество уникальных пользователей COUNT(DISTINCT user_id).  Такую математическую операцию можно сделать прямо в SELECT: SUM(revenue)/COUNT(DISTINCT user_id).
-- Используя предыдущий запрос, выведите дату и сколько в среднем денег потратили пользователи на внутриигровые покупки. Столбец «сколько в среднем денег потратили пользователи на внутриигровые покупки» назовите avg_revenue:
SELECT event_date,
    SUM(revenue)/COUNT(DISTINCT user_id) AS avg_revenue
FROM game_events
WHERE event_date <= '2021-01-15'
GROUP BY event_date;


















